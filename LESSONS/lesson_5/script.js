//цикли інструмент автоматизаціі програмування (дозволяє винонувати послідовність кілька разів)

//базовий цикл FOR

// for (ініціалізація; умова; інкремент) {
//   //код який виконуєтся //код буде виконуватись доки є якесть правдиве значення
// }

// if () {
//     //condition
// }

// for (let i = 0; i < 5; i++) {
//   console.log(i);
//(ітерація, умова, оператор)
//ітерація крок циклу ( наприклад ж массив і ми можемо зробити цикл для массиву)
//массив (набір значень розделених комою)
//for перевіряє початкове значення , потім перевіряє чи умова складаєтся потім
//  чи відбуваєтся вагалі ця умова і після того як умова відбулась у нас вдбуваєтся
// інкремент і ми можемо збільшити наш інкремент

// }

//приклад
// for (let client = 1; client <= 5; client++) {
//   console.log(`Клієнт №${client} отримує знижку!`);
// }
// for зручний коли ми зазделігіть знаємо скільки у нас буде
// ітерацій(наприклад ми заздалегіть знаємо що в нас буде 5 клієнтів)

//_________________________________________________________
//Цикл while (поки) використувується тоді коли кількість ітерацій
//  невідома але є якась умова яка повинна виконуватись

// let battery = 100; //початковий рівень заряду

// while (battery > 0) {
//   console.log(`Рівень заряду: ${battery}%.`);
//   battery -= 10; //зменшуємо заряд на 10% кожного разу
// } //не делать так крашнется браузер

//____________________________________________________
//Цикл do while - завжді виконує блок коду хоча б один раз навіть якщо умова відразу false

//attempt (спроба)

// let attempt = 0;

// while (attempt < 0) {
//   console.log(`Гра завантажується... Спроба №${attempt + 1}`);
//   attempt++;
// }

// do {
//   console.log(`Гра завантажується... Спроба №${attempt + 1}`);
//   attempt++;
// } while (attempt < 0);

//різниця між while та do while (уніерсальність дозволяють
//  виконувати первний блок коду багаторагово поки умова є істиною,навіть тоді коли кількість ітерацій невідома)
//наприлад

// let order;

// do {
//   order = prompt(
//     "Що ви хочете замовити? Напишіть 'нічого', якщо не хочете замовляти"
//   );

//   if (order.toLowerCase() !== "нічого") {
//     console.log(`Ви замовили: ${order}.`);
//   }
// } while (order.toLowerCase() !== "нічого"); //повторюємо поки ми не напишемо нічого поки умова не стане фолс
// console.log("Дякуємо за ваше замовлення");

// let order = prompt(
//   "Що ви хочете замовити? Напишіть 'нічого', якщо не хочете замовляти"
// );

// while (order.toLowerCase() !== "нічого") {
//   //перевіряємо умову після першого запиту
//   console.log(`Ви замовили ${order}.`);
//   order = prompt(
//     "Що ви хочете замовити? Напишіть 'нічого', якщо не хочете замовляти"
//   );
//   // робимо повторний запит
// }
// console.log("Дякуємо за ваше замовлення");

//_____________________________________________
// while виконуєтся тільки якщо умова в дужках дорівнює тру (не гарантує що блок коду буде взагалі виконано)
// do while виконуєтся навіть тоді коли умова відразу false як мінімум один раз (гарантує що хоча б один раз блок коду буде виповнено)

// ітерація - кроки

//_______________________________________________
// цикли for off та for in
//FOR IN

// for (змінна in обєкт) {
//   //блок коду, який викнуєтся на кожній ітераціі
// }

// const userInfo = {
//   name: "Alice",
//   email: "alice@example.com",
//   role: "admin",
//   status: "active",
// };

// for (let key in userInfo) {
//   console.log(userInfo[key]); //ключ key значення info тобто нам треба зробити з ключа в занчення

// }

// console.log(userInfo.name); //статичний не можемо додати пермінну
// console.log(userInfo[`name`]); //динамічний ключ можемо додати перемінну

//FOR OFF використовується для масивів та рядків

// for (змінна of iterable) {
//   console.log();
//блок коду, який виконуєтся на кожній ітерації
// }

// const tasks = [
//   "Закінчити звіт",
//   "Зателофонувати клієнту",
//   "Перевірити електронну пошту",
//   "Підготувати призентацію",
// ];

// for (let task of tasks) {
//   console.log(`Завдання: ${task}`);
// } // ітерація массиву

//___________нижче приклад як би це виглядало зі звичайним for________________

// const tasks = [
//   "Закінчити звіт",
//   "Зателофонувати клієнту",
//   "Перевірити електронну пошту",
//   "Підготувати призентацію",
// ];

// for (let i = 0; i < tasks.length; i++) {
//   //ми говоримо що наш перший індекс = 0 , потім ми говоримо ітераціі мають бути менше ніж довжина массиву
//   console.log(`Завдання: ${tasks[i]}`);
// }
//FOR OF зі строкою _________________________

// const word = "hello";

// for (let char of word) {
//   console.log(char);
// }  // ітерабельні елементи це - массив, строка та ще мап та сет

//__________________Ключові слова(break and continue)________________________
//коли виникає потреба припинити виконання циклу або навпаки пропустити деякі ітераціі

//BREAK

// const rooms = ["вільна", "вільна", "зайнята", "вільна", "зайнята"];

// for (let i = 0; i < rooms.length; i++) {
//   if (rooms[i] === "зайнята") {
//     console.log(`Перша зайнята кімната: ${i + 1}`);
//     break;
//   }
// } //break дозволяє нам зупиняти використання коду тоді коли нам це потрібно

//______________________CONTINUE_______________________
//цей метод дозволяє пропустити нам логіку якогось коду та рухатись далі

// const orders = [
//   { id: 1, address: "вул. Центральна, 10" },
//   { id: 2, address: "" },
//   { id: 3, address: "вул. Лісова, 5" },
//   { id: 4, address: "" },
// ]; //РОЗПОВСЮДЖЕНИЙ ВАРІАНТ МАСИВУ

// for (let order of orders) {
//   if (!order.address) {
//     //якщо не має адреси - пропускаємо ! оператор заперечення
//     continue; //Пропускаємо замовлення без адреси
//   }
//   console.log(
//     `Замовлення №${order.id} буде доставлено за адресою: ${order.address}`
//   );
// }
//break зупиняє дію якщо вона виконана а continue пропускає поточну ітерацію і переходить до наступної

// const tasks = [
//   { name: "Перевірити пошту", status: "виконано" },
//   { name: "Зателофонувати клієнту", status: "виконано" },
//   { name: "Написати звіт", status: "не виконано" },
//   { name: "Підготувати презентацію", status: "не виконано" },
// ];

// for (let task of tasks) {
//   //task це елемент масиву це ми його так назвали можемо назвати як хочемо
//   if (task.status === "не виконано") {
//     console.log(`Друге не виконане завдання: ${task.name}`);
//     break; //зупиняємо пошук як тільки знайдено не виконане
//   }
// }

// const files = ["document.pdf", "image.jpg", "temp.tmt", "report.docx"];

// for (let file of files) {
//   if (file.endsWith(".tmt")) {
//     // endsWith (Закінчується на)
//     continue; //пропускаємо тимчасові файли (схоже на фільтр допомогає відфільтрувати дані)
//   }

//   console.log(`Обробляєтся файл: ${file}`);
// }

//______________________Вкладені та несскінченні цикли_______________________

// function bookSeat(row, seat) {
//   console.log(`Місце у Рядку ${row}, Місце ${seat} заброньовано!`);
// }

// for (let row = 1; row <= 2; row++) {
//   for (let seat = 1; seat <= 3; seat++) {
//     bookSeat(row, seat);
//   }
// }
//наш зовніщній цикл перебирає рядки , внутрішній цикл перебирає місця ,(потрібно знати для роботи цикла в циклі)
//коли у нас є звичайний цикл то мі просто проходимось по одному значенюю а тут ми

//________НЕСКІНЧЕННІ ЦИКЛИ____________________________
// виконується без зупинки якщо умова виходу завжди залишається істиною

// while (true) {
// console.log("Цей цикл ніколи не завершится!!!!!!!!!") ОПАСНО
//}

// while (true) {
//   const input = prompt("Введіть 'stop', щоб завершити:");
//   if (input.toLowerCase() === "stop") {
//     console.log("Цикл завершено");
//     break; //Вихід з нескінченного циклу
//   }
// } //Коли робимо нескінченний цикл має бути сценарій виходу з нього

// let number = 0;
// let attempts = 0;
// const maxAttempts = 3;

// while (true) {
//   // Починаємо цикл
//   number = parseFloat(prompt("Введіть число більше нуля:")); ParseFloat(перетвоює строку в число - точно дає нам зрозуміти що воно розпарсить число з плаваючою точкою)
//   attempts++; //Збільшуємо кількість спроб

//   if (number > 0) {
//     console.log(`Чудово! Ви ввели правильне число: ${number}`);
//     break; // Завершуємо цикл якщо введене правильне число
//   }
//   if (attempts >= maxAttempts) {
//     console.log("Ви вичерпали всі спроби. Цикл завершено.");
//     break; //Завершуємо цикл, якщо спроби закінчились
//   }
//   console.log(
//     `Невірне значення. У вас залишилось ${maxAttempts - attempts} спроб`
//   );
// }
Math.min;
